{"apifoxProject":"1.0.0","$schema":{"app":"apifox","type":"project","version":"1.2.0"},"info":{"name":"海外贷款","description":"","mockRule":{}},"apiCollection":[{"name":"根目录","auth":{},"parentId":0,"serverId":"","description":"","identityPattern":{"httpApi":{"type":"methodAndPath","bodyType":"","fields":[]}},"preProcessors":[{"id":"inheritProcessors","type":"inheritProcessors","data":{}}],"postProcessors":[{"id":"inheritProcessors","type":"inheritProcessors","data":{}}],"inheritPostProcessors":{},"inheritPreProcessors":{},"items":[{"name":"登录","api":{"id":"92193474","method":"post","path":"/api/auth/login","parameters":{},"auth":{},"commonParameters":{"query":[],"body":[],"cookie":[],"header":[]},"responses":[{"id":"230253106","name":"成功","code":200,"contentType":"json","jsonSchema":{"type":"object","properties":{"code":{"type":"integer"},"msg":{"type":"string"},"data":{"type":"object","properties":{"access_token":{"type":"string","title":"token"},"token_type":{"type":"string"},"expires_in":{"type":"integer","title":"过期时间/秒"}},"required":["access_token","token_type","expires_in"],"x-apifox-orders":["access_token","token_type","expires_in"]}},"required":["code","msg","data"],"x-apifox-orders":["code","msg","data"]}}],"responseExamples":[{"name":"返回成功","data":"{\"code\":200,\"msg\":\"\\u8bf7\\u6c42\\u6210\\u529f\",\"data\":{\"access_token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjk1MjcvYXBpL2F1dGgvbG9naW4iLCJpYXQiOjE2ODgwMzgwODEsImV4cCI6MTY4ODAzODE0MSwibmJmIjoxNjg4MDM4MDgxLCJqdGkiOiJOTWpjT2xRdWZ5M2FGWnJQIiwic3ViIjoiMSIsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjciLCJhdmF0YXIiOiJodHRwczovL2ltZzEuYmFpZHUuY29tL2l0L3U9ODk4NjkyNTM0LDI3NjYyNjA4MjcmZm09MjUzJmFwcD0xMzgmc2l6ZT13OTMxJm49MCZmPUpQRUcmZm10PWF1dG8_c2VjPTE2ODgwNTgwMDAmdD02OTcyMmZhNjM4MjdmYzE3MmQ4MzU1ZjZhMWMzNTFmYSJ9.lnmhbqqPMJCpLkNVHjndvAxMbRXdAgZ9p89_HhICYto\",\"token_type\":\"bearer\",\"expires_in\":60}}","responseId":230253106,"ordering":1},{"name":"登录失败","data":"{\"code\":0,\"msg\":\"\\u672a\\u627e\\u5230\\u5f53\\u524d\\u7528\\u6237\",\"data\":[]}","responseId":0,"ordering":2}],"requestBody":{"type":"multipart/form-data","parameters":[{"required":false,"description":"邮箱","type":"string","name":"email","example":"blair.bechtelar@example.com","id":"AIHGGE8OmI"},{"required":false,"description":"密码","type":"string","name":"password","example":"password","id":"0DOjuLlDFw"}]},"description":"","tags":[],"status":"developing","serverId":"","operationId":"","sourceUrl":"","ordering":10,"cases":[],"mocks":[],"customApiFields":"{}","advancedSettings":{},"mockScript":{},"codeSamples":[],"preProcessors":[],"postProcessors":[],"inheritPostProcessors":{},"inheritPreProcessors":{}}},{"name":"需授权","auth":{"type":"bearer","bearer":{"token":"{{accessToken}}"}},"parentId":0,"serverId":"","description":"","identityPattern":{"httpApi":{"type":"inherit","bodyType":"","fields":[]}},"preProcessors":[{"id":"inheritProcessors","type":"inheritProcessors","data":{}}],"postProcessors":[{"type":"customScript","data":"\nvar headers = pm.response.headers;\nif(headers.get(\"Authorization\") != undefined){   \n    pm.environment.set(\"accessToken\", headers.get(\"Authorization\"));\n    console.log('获取到了新的token')\n}\n// pm.environment.set(\"accessToken\", '');\n\n\n\nconsole.log(pm.environment.get(\"accessToken\"));\n","defaultEnable":true,"id":"n5qGJS8eUrpq3P-UlYGPR"},{"id":"inheritProcessors","type":"inheritProcessors","data":{}}],"inheritPostProcessors":{},"inheritPreProcessors":{},"items":[{"name":"我的","api":{"id":"92194765","method":"post","path":"/api/me","parameters":{},"auth":{},"commonParameters":{"query":[],"body":[],"cookie":[],"header":[]},"responses":[{"id":"230254863","name":"成功","code":200,"contentType":"json","jsonSchema":{"type":"object","properties":{}}}],"responseExamples":[],"requestBody":{"type":"none","parameters":[]},"description":"","tags":[],"status":"developing","serverId":"","operationId":"","sourceUrl":"","ordering":10,"cases":[],"mocks":[],"customApiFields":"{}","advancedSettings":{},"mockScript":{},"codeSamples":[],"preProcessors":[],"postProcessors":[],"inheritPostProcessors":{},"inheritPreProcessors":{}}},{"name":"退出登录","api":{"id":"92222304","method":"post","path":"/api/logout","parameters":{},"auth":{},"commonParameters":{"query":[],"body":[],"cookie":[],"header":[]},"responses":[{"id":"230324296","name":"成功","code":200,"contentType":"json","jsonSchema":{"type":"object","properties":{}}}],"responseExamples":[],"requestBody":{"type":"none","parameters":[]},"description":"","tags":[],"status":"developing","serverId":"","operationId":"","sourceUrl":"","ordering":20,"cases":[],"mocks":[],"customApiFields":"{}","advancedSettings":{},"mockScript":{},"codeSamples":[],"preProcessors":[],"postProcessors":[],"inheritPostProcessors":{},"inheritPreProcessors":{}}},{"name":"更新密码","api":{"id":"92222635","method":"post","path":"/api/reset-pwd","parameters":{},"auth":{},"commonParameters":{"query":[],"body":[],"cookie":[],"header":[]},"responses":[{"id":"230324720","name":"成功","code":200,"contentType":"json","jsonSchema":{"type":"object","properties":{}}}],"responseExamples":[],"requestBody":{"type":"multipart/form-data","parameters":[{"required":false,"description":"","type":"string","name":"password","id":"ms4PbstDWk"}]},"description":"","tags":[],"status":"developing","serverId":"","operationId":"","sourceUrl":"","ordering":30,"cases":[],"mocks":[],"customApiFields":"{}","advancedSettings":{},"mockScript":{},"codeSamples":[],"preProcessors":[],"postProcessors":[],"inheritPostProcessors":{},"inheritPreProcessors":{}}}]}]}],"socketCollection":[],"docCollection":[{"name":"根目录","children":[{"name":"需授权","children":[],"items":[]}],"items":[{"id":2670048,"name":"接口请求须知","content":"# 接口请求须知\n## 时间戳\n`参数为timestamp, 时间戳为11位数，附带到query中,例如：a.com/a?timestamp=12312312311`\n## Nonce\n`参数为nonce，nonce为随机字符串，建议生成规则为时间戳（13位） + 随机数 10000-99999内 或者是其他随机数，然后md5 ,例如md5(timestamp + 12312312)  。\n附带到query中,例如：a.com/a?nonce=asdasdasd`\n## sign\n`参数为sign，生成规则如下文，附带到query中,例如：a.com/a?sign=12312312311`\n\n## sign生成规则\n1.  `拼接成字符串`按照请求参数名的字母升序排列**非空请求参数**，使用 URL 键值对的格式（即 key1=value1&key2=value2…）拼接成字符串 stringA；\n2. `拼接Secretkey`在 stringA 最后拼接上 Secretkey 得到字符串 stringSignTemp\n3. `MD5加密`: 对 stringSignTemp 进行 MD5 运算\n4. `得到sign值` 并将得到的字符串所有字符转换为大写，得到 sign 值。\n\n### 例子：\n假设传送的参数为:\n> username: yyh\n> password : admin888`\n> remember:\n\n**注，需携带timestamp和nonce参数，并且删除sign参数**\n\n第一步：对参数按照key=value的格式，并按照参数名ASCII字典序排序如下:\n`nonce=cb01ce851ffd0fdd0a7ccc137069c20c&password=admin&timestamp=1688216316&username=yyh`\n第二步：拼接API密钥(例如秘钥为api_key)\n`nonce=cb01ce851ffd0fdd0a7ccc137069c20c&password=admin&timestamp=1688216316&username=yyhapi_key`\n第三步：md5字符串并且转换为大写\n`sign = CryptoJS.MD5(stringSignTemp).toString().toUpperCase();`\n第四步：携带到query中\n`https://a.com/index?sign=123123`\n\n\n\n## js参考代码：\n```\n\n\n\n\n\n\n\n\n// 获取预先设置为环境变量的 APPKEY\nlet key = 'KzZXfKKUJqhnGN2q6jymLtMI1bcqP4NBRGWDC8Jwl22dsW6gSOwBwj480rbJqZ2J';\n\n// 存放所有需要用来签名的参数\nlet param = {};\n\n// 加入 query 参数\nlet queryParams = param.query;\nconsole.log(queryParams);\n\nqueryParams.each(item => {\n    if ( item.value !== '') { // 启用且非空参数值的参数才参与签名\n        param[item.key] = item.value;\n    }\n});\n\n// 加入 body 参数\nif (pm.request.body) {\n    let formData;\n    switch (pm.request.body.mode) {\n        case 'formdata':\n            formData = pm.request.body.formdata;\n            break;\n        default:\n            break;\n    }\n    if (formData) {\n        formData.each(item => {\n            if (!item.disabled && item.value !== '') { // 启用且非空参数值的参数才参与签名\n                param[item.key] = item.value;\n            }\n        });\n    }\n}\n\n\n// 取 key\nlet keys = [];\nfor (let key in param) {\n    // 注意这里，要剔除掉 sign 参数本身\n    if (key !== 'sign') {\n        keys.push(key);\n    }\n}\n\n// 参数名 ASCII 码从小到大排序（字典序）\nkeys.sort();\n\n// 转成键值对\nlet paramPair = [];\nfor (let i = 0, len = keys.length; i < len; i++) {\n    let k = keys[i];\n    paramPair.push(k + '=' + encodeURIComponent(param[k])) // urlencode 编码\n}\n\n// 最后加上 key\n\n// 拼接\nlet stringSignTemp = paramPair.join('&');\nstringSignTemp = stringSignTemp + key;\nconsole.log('加密前字符串',stringSignTemp);\n\nlet sign = CryptoJS.MD5(stringSignTemp).toString().toUpperCase();\nconsole.log('计算的签名',sign);\n\npm.environment.set(\"sign\", sign);\n```","folderId":0,"type":""},{"id":2670052,"name":"Auth无痛切换Token","content":"## 何为无痛切换Token\n为了安全以及服务器性能，此项目采用了JWT的授权方式，将参数传递到header中，参数值为：`Authorization`，所以会涉及到一个情况，token过期了了，但是没有失效；\n例如一个用户登录了， token的过期时间为1h，失效时间为7天，那么每1htoken就会失效，然后**服务器将会在返回的header种添加一个`Authorization`参数**，值为新的token，下次后续请求用新下发的token来继续进行授权操作，避免用户多次登录；\n\n\n![image.png](https://api.apifox.cn/api/v1/projects/2915882/resources/389197/image-preview)","folderId":0,"type":""},{"id":2670053,"name":"接口返回状态码查询","content":"# 接口返回格式如下：\n\n### 正确返回参数\n\n```\n{\n\t\"code\": 200,\n\t\"msg\": \"请求成功\",\n\t\"data\": {\n\t\t\"access_token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTI3LjAuMC4xOjk1MjcvYXBpL2F1dGgvbG9naW4iLCJpYXQiOjE2ODgyMTY3OTYsImV4cCI6MTY4ODIxNjg1NiwibmJmIjoxNjg4MjE2Nzk2LCJqdGkiOiJjTlBpQVdWRzlZd0RRTWZMIiwic3ViIjoiMSIsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjciLCJhdmF0YXIiOiJodHRwczovL2ltZzEuYmFpZHUuY29tL2l0L3U9ODk4NjkyNTM0LDI3NjYyNjA4MjcmZm09MjUzJmFwcD0xMzgmc2l6ZT13OTMxJm49MCZmPUpQRUcmZm10PWF1dG8_c2VjPTE2ODgwNTgwMDAmdD02OTcyMmZhNjM4MjdmYzE3MmQ4MzU1ZjZhMWMzNTFmYSJ9.8EqL5pSPNMjK12_d8AjF0PwIthTgd7XwwO16SxZP74E\",\n\t\t\"token_type\": \"bearer\",\n\t\t\"expires_in\": 60\n\t}\n}\n```\n\n### 错误返回参数\n\n```\n{\n\t\"code\": 0,\n\t\"msg\": \"密码错误\",\n\t\"data\": []\n}\n```\n\n\n**Http码**需要判断两种，一：200的，二：500；如果是500则直接提示**系统错误，请联系管理员**\n\n\n如果返回状态码为200，那么以下为当前所呈现的几种code值\n\n`200 请求成功`\n`0 正常请求失败 ，弹出错误提示即可`\n`401 登录失效 ，需要跳转到登录页面，重新登录`\n`500 系统错误 ，弹出错误提示即可`\n`400 参数错误，例如用户名为空，密码为空等`\n","folderId":0,"type":""}]}],"schemaCollection":[],"responseCollection":[],"apiTestCaseCollection":[{"name":"根目录","children":[{"name":"默认目录","children":[],"items":[]}],"items":[]}],"testCaseReferences":[],"environments":[],"commonScripts":[],"databaseConnections":[],"globalVariables":[{"id":"2915882","variables":[]}],"commonParameters":{"id":461342,"createdAt":"2023-06-29T17:11:42.000Z","updatedAt":"2023-06-30T00:39:34.000Z","deletedAt":null,"parameters":{"query":[{"name":"timestamp","defaultEnable":true,"type":"string","defaultValue":"{{timestamp}}"},{"name":"sign","defaultEnable":true,"type":"string","defaultValue":"{{sign}}"},{"name":"nonce","defaultEnable":true,"type":"string","defaultValue":"{{nonce}}"}]},"projectId":2915882,"creatorId":448118,"editorId":448118},"projectSetting":{"id":"2350710","auth":{},"servers":[{"id":"default","name":"默认服务"}],"gateway":[],"language":"zh-CN","apiStatuses":["developing","released"],"mockSettings":{},"preProcessors":[{"type":"customScript","data":"\n//设置时间戳\nvar timestamp=new Date().getTime();\npm.environment.set(\"timestamp\", timestamp);\nconsole.log('时间戳', timestamp)\n\n//设置nonce\nlet nonce = timestamp + Math.floor(Math.random() * 1000);\npm.variables.set(\"nonce\", nonce);\n\nconsole.log('nonce', nonce)\n","executionTiming":"presend","defaultEnable":true,"id":"xwed8vdmvSDqZcEIa3fQhmP5VffoDvTb"},{"type":"customScript","data":"\n\n\n\n\n\n\n\n// 获取预先设置为环境变量的 APPKEY\nlet key = pm.environment.get(\"APPKEY\");\n\n// 存放所有需要用来签名的参数\nlet param = {};\n\n// 加入 query 参数\nlet queryParams = pm.request.url.query;\nconsole.log(queryParams);\n\nqueryParams.each(item => {\n    if (!item.disabled && item.value !== '') { // 启用且非空参数值的参数才参与签名\n        param[item.key] = item.value;\n    }\n});\n\n// 加入 body 参数\nif (pm.request.body) {\n    let formData;\n    switch (pm.request.body.mode) {\n        case 'formdata':\n            formData = pm.request.body.formdata;\n            break;\n        default:\n            break;\n    }\n    if (formData) {\n        formData.each(item => {\n            if (!item.disabled && item.value !== '') { // 启用且非空参数值的参数才参与签名\n                param[item.key] = item.value;\n            }\n        });\n    }\n}\n\n\n// 取 key\nlet keys = [];\nfor (let key in param) {\n    // 注意这里，要剔除掉 sign 参数本身\n    if (key !== 'sign') {\n        keys.push(key);\n    }\n}\n\n// 参数名 ASCII 码从小到大排序（字典序）\nkeys.sort();\n\n// 转成键值对\nlet paramPair = [];\nfor (let i = 0, len = keys.length; i < len; i++) {\n    let k = keys[i];\n    paramPair.push(k + '=' + encodeURIComponent(param[k])) // urlencode 编码\n}\n\n// 最后加上 key\n\n// 拼接\nlet stringSignTemp = paramPair.join('&');\nstringSignTemp = stringSignTemp + key;\nconsole.log('加密前字符串',stringSignTemp);\n\nlet sign = CryptoJS.MD5(stringSignTemp).toString().toUpperCase();\nconsole.log('计算的签名',sign);\n\npm.environment.set(\"sign\", sign);\n","executionTiming":"presend","defaultEnable":true,"id":"sG9hbiV8aq4ETkPsxGjoWMXMc7SPDjgj"}],"postProcessors":[],"advancedSettings":{},"initialDisabledMockIds":[],"cloudMock":{"security":"free","enable":false,"tokenKey":"apifoxToken"}}}